//3727
#include <bits/stdc++.h>
using namespace std;
typedef vector<int> Lista;
typedef vector<Lista> Lista2D;

int Busca(int u , Lista2D &aris, Lista &color , vector<bool> &visi){
	
	int act = 0 , tam = 0;
	visi[u] = true;
	queue<int> cola;
	for( cola.push(u) ; !cola.empty() ;  cola.pop()){
		act = cola.front();			
		tam++;	
		bool uno = false , dos = false;
		for(auto v : aris[act]){
			if(!color[v]) continue;
			if(color[v] == 1 ) uno = true ;
			if(color[v] == 2 ) dos = true;
		}
		if(uno) color[act] = 2;
		else color[act] = 1;
	
		for(auto v : aris[act] ){
			if(visi[v]) continue;
			cola.push(v);
			visi[v] = true;
		}			
	}
	
	return tam;
		
}

int main(){
	
	int a, b;
	int N , M;
	
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin >> N >> M ;
	Lista color(N);
	vector<bool>visi(N);
	Lista2D aris(N);
	for(int i = 0 ; i < M ; i++){
		cin >> a >> b ;
		a-- , b--;
		aris[a].push_back(b);
		aris[b].push_back(a);
	}
		
	for(int i = 0 ; i < N ; i++){
		if(!visi[i]){		
			int tam = Busca(i,aris,color,visi);
			if(tam == 1){
				cout << "Impossible\n";
				return 0;
			}				
		}
	}
	
	cout << "Possible\n";
	for(int i = 0 ; i < N ; i++)
		cout << color[i] << '\n';
	
	
	return 0;
}
//3979
#include <bits/stdc++.h>
using namespace std;

int N , M;
vector<int> v;
int memo[1002][1002];

int puede(int p,int r){
	if( p == N ){
		if(r == 0) return 1;
		return 0;
	}
	if(memo[p][r] != -1) return memo[p][r];
	
	int ret = max(puede(p+1,(r+v[p])%M),puede(p+1,(M+r-v[p])%M));
	return memo[p][r] = ret;
}

int main(){	
	
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin >> N >> M; 
	v = vector<int>(N);
	for(int i  = 0 ; i <= N ; i++)
		for(int j = 0 ; j <= M ; j++)
			memo[i][j] = -1;
	for(int i = 0 ; i < N ; i++){
		cin >> v[i];
		v[i] %= M;
	}
		
	
	if(puede(1,v[0]%M)) cout << "valid\n";
	else cout << "invalid\n";
	
	return 0;
}
//3984
#include <bits/stdc++.h>
using namespace std;


int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	string lee;
	cin >> lee;
	string cad = "*" + lee;
	
	int tmp = 1;
	char tmpC = '*';
	int res = 0;
	char resC = '*';
	for( int i = 1; i < cad.size(); i++ ){
		if( cad[i] == tmpC ){
			tmp++;
		}
		else{
			if( res < tmp ){
				res = tmp;
				resC = tmpC;
			}
			tmp = 1;
			tmpC = cad[i];
		}
	}
	if( res < tmp ){
		res = tmp;
		resC = tmpC;
	}
	cout << res << ' ' << resC << '\n';
	return 0;
}
//3983
#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;

const int MAXN = 15;
int memo[1 << MAXN][MAXN][MAXN][3];
int costo[MAXN][MAXN];
int mat[MAXN][MAXN];
int dist[MAXN];
int A[MAXN];
const int INF = 30;
char vis[1 << MAXN][MAXN][MAXN][3];
int N, M, K, S, B;

void recalc() {

	for (int k = 0; k < N; ++k)
		for (int i = 0; i < N; ++i) 
			for (int j = 0; j < N; ++j) {
				costo[i][j] = min(costo[i][j], costo[i][k] + costo[k][j]);
			}
	
}

int curMin(int msk, int o) {
	for (int i = 0; i < N; ++i) dist[i] = INF;
	priority_queue<pii> Q;
	dist[o] = 0;
	Q.push(pii(0, o));
	while (!Q.empty()) {
		int p = Q.top().first;
		int u = Q.top().second;
		if (dist[u] < p) continue;
		Q.pop();
		for (int i = 0; i < N; ++i) {
			if (mat[u][i]) {
				int v = i;
				int np = dist[u] + costo[u][i];
				if (np < dist[v]) dist[v] = np;
				if (msk & (1 << v)) {
					Q.push(pii(-np, v));
				}
			}
		}
	}
}

int DP(int msk, int u, int lk, int rested) {
	if (vis[msk][u][lk][rested]) return memo[msk][u][lk][rested];
	vis[msk][u][lk][rested] = true;
	if ((msk == ((1 << N) - 1)) && (rested)) return memo[msk][u][lk][rested] = 0;
	
	int curans = 0;
	for (int i = 0; i < N; ++i) {
		if (msk & (1 << i)) continue;
		
		dist[i] = costo[u][i];
		if (dist[i] != INF) {
			if ((dist[i] + lk) <= K) {
				curans = max(curans, DP(msk | (1 << i), i, dist[i] + lk, rested) + A[i]);
			}	
		}
	}
	
	if (!rested) {
		curans = max(curans, DP(1 << B, B, lk, rested + 1) + A[B]);
	}
	
	return memo[msk][u][lk][rested] = curans;
} 

int main(){
	cin.tie(0); ios_base::sync_with_stdio(0);
	
	cin >> N >> M >> B >> S >> K;
	
	for (int i = 0; i < N; ++i) cin >> A[i];
	for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j) {costo[i][j] = INF;
	if (i == j) costo[i][j] = 0;
}
	for (int i = 0; i < M; ++i) {
		int xi, yi, zi;
		cin >> xi >> yi >> zi;
		xi--, yi--;
		mat[xi][yi] = 1;
		mat[yi][xi] = 1;
		costo[xi][yi] = min(costo[xi][yi], zi);
		costo[yi][xi] = costo[xi][yi];
	}
	
	S--;
	B--;
	recalc();
	cout << DP(1 << S, S, 0, 0) + A[S] << '\n';
	
	return 0;
}
//3986
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	string read;
	cin >> read;
	vector<pii> vec(9);
	for( int i = 0; i < vec.size(); i++ )
		vec[i].second = -i-1;
	for( int i = 0; i < read.size(); i++ ){
		vec[ read[i]-'0'-1 ].first++;
	}
	sort(vec.begin(), vec.end());
	reverse(vec.begin(), vec.end());
	for( int i = 0; i < vec.size(); i++ ){
		if(i) cout << ' ';
		cout << -vec[i].second;
	}
	cout << '\n';
	return 0;
}
//3982
#include <bits/stdc++.h>
using namespace std;
typedef long long int Long;
const Long MAXP = 1LL<<60;

bool Puede(Long n , Long a, Long b, Long x, Long y){
	
	Long pa = (n/y) - (n/(x*y));	
	Long pb = (n/x) - (n/(x*y));
	
	Long q = n - (n/x) - (n/y) + (n/(x*y));
	
	a = max(0LL,a-pa);
	b = max(0LL,b-pb);
	
	return q >= (a+b);
	
}

int main(){
	
	Long p;
	Long B;
	Long R;
	Long x,y;	
	Long C1,C2;
	
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin >> C1 >> C2 >> x >> y;	
	
	R = C1+C2;
	if(x == y){
		B = R/(x-1LL);
		p = B*x-1;
		if(R%(x-1))
			p += (R%(x-1))+1;
	} else {
		Long ini = 1 , fin = MAXP;
		Long mitad = (ini+fin)/2;
		
		while(ini < fin){
			if(Puede(mitad,C1,C2,x,y)) fin = mitad;
			else ini = mitad+1;
			mitad = (ini+fin)/2;
		}
		
		p = ini;
		
	}
	
	cout << p << '\n';
	
	return 0;
}
//3981
#include <bits/stdc++.h>
using namespace std;

#define EQ(a, b) (fabs((a) - (b)) < ERROR)

typedef pair<int, int> pii;
typedef long double Double;
const Double ERROR = 1e-9;

struct Punto{
	Double x, y;
	Punto() : x(), y(){}
	Punto( Double X, Double Y ) : x(X), y(Y) {}
	bool operator<(const Punto& q){
		if(!EQ(x, q.x))	return x < q.x;
		return EQ( y, q.y ) ? false : y < q.y;
	}
	Punto operator +(const Punto& p)const{ return Punto(x+p.x, y+p.y);}
	Punto operator -(const Punto& p)const{ return Punto(x-p.x, y-p.y);}
	Punto operator*( Double c )const{ return Punto(x*c, y*c);}
	Double Abs()const{ return hypot(x, y);}
	Double Norm()const{ return x*x+y*y;}
	Double Dot(const Punto& q)const{ return x*q.x+ y*q.y;}
	Double Dist(const Punto& q)const{ return (*this - q).Abs();}
	
};

struct Linea{
	Punto p, q;
	Linea( const Punto& P, const Punto & Q ): p(P), q(Q){
		if( q < p ) swap( p, q );
	}
};

Punto ProyeccionEnRecta( const Punto& v, const Linea& r ){
	return r.p + (r.q - r.p) * 
			( (v - r.p ).Dot(r.q - r.p)/(r.p - r.q).Norm());
}

Double DistanciaPuntoRecta( const Punto& p, const Linea& r ){
	return p.Dist( ProyeccionEnRecta(p,r) );
}

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	Punto A, B, C;
	
	cin >> A.x >> A.y;
	cin >> B.x >> B.y;
	cin >> C.x >> C.y;
	
	Linea l(B, C);
	
	Punto inter = ProyeccionEnRecta(A, Linea(B, C));
	cout << fixed << setprecision(3) << inter.x << ' ' << inter.y << ' ' << DistanciaPuntoRecta(A, l) << '\n';

	return 0;
}

